* What is FUSTA?
FUSTA is a FUSE-based virtual filesystem mirroring a (multi)FASTA file as a hierarchy of individual virtual files, simplifying efficient data extraction and bulk/automated processing of FASTA files.

[[file:fusta.png]]

** Licensing
FUSTA is distributed under the CeCILL-C (LGPLv3 compatible) license. Please see the LICENSE file for details.
* Getting Started
** Installation
*** FUSE
FUSE (Filesystem in USErspace) is a software interface bridging userspace code and kernel routines allowing the use of file-based interfaces without inclusion in the kernel or administrator rights.
**** GNU/Linux
On most GNU/Linux distributions,  FUSE is installed by default. Otherwise, you should install it from your package manager – note that a reboot might be necessary for the kernel module to be loaded.
**** macOS
You should download and install [[https://osxfuse.github.io/][FUSE for macOS]] in order to be able to use FUSTA.
**** FreeBSD
First, some dependencies should be installed:
#+begin_src
pkg add pkgconf fusefs-libs
#+end_src
The FUSE kernel module has then to be loaded:
#+begin_src
sudo kldload fuse
#+end_src
Finally, you may wish to enable FUSE mounting without requiring administrator permissions:
#+begin_src
sudo sysctl vfs.usermount=1
#+end_src
*** From Source
**** Prerequisites
To build FUSTA from sources, you need to install the [[https://www.rust-lang.org/en-US/install.html][Rust compiler]]. Once it has been installed, clone the repository:
#+begin_src
git clone https://github.com/delehef/fusta.git
#+end_src
**** Installation
You can then build FUSTA by running =cargo=, the Rust build tool:
#+begin_src
cd fusta
cargo build --release
#+end_src
Once the build has concluded, you will find the binary in =target/release/fusta=. It can be run from there, or you may move it to a more standard location.

* Usage
** Quick Start
These commands run =fusta= in the background, mount the FASTA file =file.fa= in an automatically created =fusta= folder, exposing all the sequences contained in =file.fa= there. The call to =tree= will display the virtual hierarchy, then =fusermount= is called to cleanly unmount the file.

#+begin_src
fusta file.fa -D
tree -h fusta/
fusermount -u fusta
#+end_src
** Description
Once started, =fusta= will expose the content of a FASTA file in a way that makes it usable by any piece of software using as if it were a set of independent files, detailed as follow.

For instance, here is the virtual hierarchy created by =fusta= after mounting a FASTA file containing /A. thaliana/ genome
#+begin_src
fusta
├── append
├── fasta
│   ├── 1.fa
│   ├── 2.fa
│   ├── 3.fa
│   ├── 4.fa
│   ├── 5.fa
│   ├── Mt.fa
│   └── Pt.fa
├── get
├── infos.csv
├── infos.txt
├── labels.txt
└── seqs
    ├── 1.seq
    ├── 2.seq
    ├── 3.seq
    ├── 4.seq
    ├── 5.seq
    ├── Mt.seq
    └── Pt.seq
#+end_src
*** =infos.csv=
This read-only CSV file contains a list of all the fragments present in the mounted FASTA file, with, for each of them, the standard =id= and =additional informations= field, plus a third one containing the length of the sequence.
*** =infos.txt=
This read-only text file provides the same informations, but in a more human-readable format.
*** =labels.txt=
This read-only file contains a list of all the sequence headers present in the mounted FASTA file.
*** =fasta=
This folder contains all the individual sequences present in the original FASTA file, exposed as virtually independent read-only FASTA files.
*** =seqs=
This folder contains all the individual sequences present in the original FASTA file, exposed as virtually independent read/write files containing only the sequences - without the FASTA headers, but with any newline preserved. These files can be read, copied, removed, edited, etc. as normal files, and any alteration will be reflected on the original FASTA file when fusta is closed.
*** =append=
This folder should be used to add new sequences to the mounted FASTA file. Any valid fasta file copied or moved to this directory will be appended to the original FASTA files. It should be noted that the process is completely transparent and the the folder will remain empty, even though the operation is successful.
*** =get=
This folder is used for range-access to the sequences in the mounted FASTA file. Although it is empty, any read access to a (non-existing) file following the pattern =SEQID:START-END= will return the corresponding range (0-indexed) in the specified sequence. It should be noted that the access skip headers and newlines, so that the =START-END= coordinates map to actual loci in the corresponding sequence and not to bytes in the mounted FASTA file.
** Examples
All the following examples assume that a FASTA file has been mounted (/e.g./ =fusta -D genome.fa=), and is unmounted after manipulation (/e.g./ =fusermount -u fusta=).
*** Get an overview of the file content
 #+begin_src shell
 cat fusta/infos.txt
 #+end_src
*** Extract individual sequences as FASTA files
 #+begin_src shell
 cat fusta/fasta/chr{X,Y}.fa > ~/sex_chrs.fa
 #+end_src
*** Extract a range of chromosome 12
 #+begin_src shell
 cat fusta/get/chr12:12000000-12002000
 #+end_src
*** Remove sequences from the original file
 #+begin_src shell
 rm fusta/seq/chr{3,5}.seq
 #+end_src
*** Add a new sequence
 #+begin_src shell
 cp more_sequences.fa fusta/append
 #+end_src
*** Edit the mitochondrial genome
 #+begin_src shell
 nano fusta/seq/chrMT.seq
 #+end_src
*** Batch-rename chromosomes
 #+begin_src shell
 cd fusta/seq; for i in *; do mv ${i} chr${i}; done
 #+end_src
*** Use independent sequences in external programs
 #+begin_src shell
 blastn mydb.db -query fusta/fasta/seq25.fa
 asgart fusta/fasta/chrX.fa fusta/asgart/chrY.fa --out result.json
 #+end_src
** Runtime options
#+begin_src
USAGE:
    fusta [OPTIONS] <FASTA> --mountpoint <mountpoint>

OPTIONS:
        --cache <cache>              Use either mmap, fseek(2) or just memory-backed cache to extract sequencse from
                                     FASTA files [default: mmap]  [possible values: file, mmap,
                                     memory]
        --cache-all                  Cache all the sequences in RAM for faster access. WARNING as much RAM as the size
                                     of the FASTA file should be available. Recommended when needing fast access above
                                     all.
    -D, --daemon                     Launch in the background; will automatically quit when unmounted
    -h, --help                       Prints help information
    -C, --max-cache <max-cache>      Set the maximum amount of memory to use to cache writes (MB) [default: 500]
    -o, --mountpoint <mountpoint>    Specifies the directory to use as mountpoint; it will be created if it does not
                                     exist [default: fusta]
    -E, --non-empty                  Perform the mount even if the destination folder is not empty
    -v                               Sets the level of verbosity
    -V, --version                    Prints version information

ARGS:
    <FASTA>    A (multi)FASTA file containing the sequences to mount
#+end_src

*** =--cache=
The cache option is key in adapting FUSTA to your use, and for files of non-trivial size, a correct choice is the difference between a memory overflow and a smooth run:
- =file= :: in this mode, FUSTA store all the fragments as offsets in their file, and access them through =fseek= accesses. The performances will probably be the worse, but memory consumption will be kept to the minimal.
- =mmap= :: this mode is extremely similar to the previous one, safe that access will proceed through [[https://en.wikipedia.org/wiki/Mmap][mmmap(2)]] reads, leveraging the caching facilities of the OS -- this is the default mode.
- =memory= :: in this mode, all fragments will directly be copied to memory. Performances will be at their best, but enough memory should be available to store the entirety of the processed files.
* Troubleshooting
*** I get a "Cannot allocate memory" error
The FASTA files may be overflowing the default setting of the memory overcommit guard. You may change the overcommiting setting with =sysctl -w vm.overcommit_memory 1=, or use =--cache=file= for less performances, but less virtual memory pressure.
*** I *still* get a "Cannot allocate memory" error
Your FASTA file may contain too many fragments w.r.t. the number of mmap pages that can be mapped by a program. You may increase =max_map_count= with =sysctl -w vm.max_map_count 200000=, or use =--cache=file= for less performances, but less virtual memory pressure.
*** I have another error
[[https://github.com/delehef/fusta/issues][Open an issue stating your problem!]]
* Contact
If you have any question or if you encounter a problem, do not hesitate to [[https://github.com/delehef/fusta/issues][open an issue]].
* Acknowledgments
FUSTA is standing on the shoulders of, among others, [[https://github.com/cberner/fuser][fuser]], [[https://github.com/clap-rs/clap][clap]], [[https://github.com/danburkert/memmap-rs][memmap]] and [[https://github.com/knsd/daemonize][daemonize]].
* Changelog
** v1.4
- Daemonize /after/ parsing FASTA files, so that (i) errors appear immediately and (ii) performances are better when launching multiple instances in parallel.
** v1.3
- Can now cache all fragments in memory: increased RAM consumption, but starkly reduced random access time
** v1.2.1
- Bugfixes
** v1.2
- FUSTA is now based on fuster instead of fuse-rs
- Various optimization let FUSTA handle >40GB FASTA files in 6GB of RAM and much better performances
- Added an optional notification system behind the =notifications= feature gate
** v1.1.1
- Use MMAP by default. While it may lead to unpleasant load when performing heavy operation on very large files, this should be a rather uncommon case.
** v1.1
- FUSTA can now directly extract ranges from a sequence
** v1.0
- Initial release
