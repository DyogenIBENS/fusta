* What is FUSTA?
FUSTA is a FUSE-based virtual filesystem mirroring a (multi)FASTA file as a hierarchy of individual virtual files, simplifying efficient data extraction and bulk/automated processing of FASTA files.
** Licensing
FUSTA is distributed under the CeCILL-C (LGPLv3 compatible) license. Please see the LICENSE file for details.
* Getting Started
** Installation
*** From Source
**** Prerequisites
To build FUSTA from sources, you need the [[https://www.rust-lang.org/en-US/install.html][Rust compiler]]. Once it has been installed, clone the repository:
#+begin_src
git clone https://github.com/delehef/asgart.git
#+end_src
**** Installation
You can then build FUSTA by running =cargo=, the Rust build tool:
#+begin_src
cargo build --release
#+end_src
Once the build has concluded, you will find the binary in =target/release/fusta=. It can be run form there or may be moved to a more standard location.

* Usage
** Quick Start
These commands will automatically create a folder =fusta= then run =fusta= in the background, which will mount the FASTA file =file.fa= in it, exposing all the sequences it contains. The call to =tree= will display the virtual hierarchy, then =fusermount= is called to cleanly unmount the file.

#+begin_src
fusta file.fa -D
tree -h fusta/
fusermount -u fusta
#+end_src
** Options
#+begin_src
USAGE:
    fusta [OPTIONS] <FASTA> --mountpoint <mountpoint>

OPTIONS:
    -D, --daemon                     Launch in the background; will automatically quit when unmounted
    -h, --help                       Prints help information
    -M, --mmap                       Use mmap instead of seek to extract sequences. Faster, but memory hungrier.
    -o, --mountpoint <mountpoint>    Specifies the directory to use as mountpoint [default: fusta]
    -E, --non-empty                  Perform the mount even if the destination folder is not empty
    -v                               Sets the level of verbosity
    -V, --version                    Prints version information

ARGS:
    <FASTA>    A (multi)FASTA file containing the sequences to mount
#+end_src
** Examples
   All the following examples assume that a fasta file has been mounted (/e.g./ =fusta -D genome.fa=), and is unmounted after manipulation (=fusermount fusta=).
*** Extract Sequences
 #+begin_src shell
 cat fusta/fasta/chr{X,Y}.fa > ~/sex_chrs.fa
 #+end_src
*** Remove Sequences
 #+begin_src shell
 rm fusta/seq/chr{3,5}.seq
 #+end_src
*** Add Sequence
 #+begin_src shell
 cp more_sequences.fa fusta/append
 #+end_src
*** Edit A Sequence
 #+begin_src shell
 nano fusta/seq/chrMT.seq
 #+end_src
*** Rename Sequences
 #+begin_src shell
 cd fusta/seq; for i in *; do mv ${i} chr${i}; done
 #+end_src
*** Processing Sequence(s)
 #+begin_src shell
 blastn mydb.db -query fusta/fasta/seq25.fa
 asgart fusta/fasta/chrX.fa fusta/asgart/chrY.fa --out result.json
 #+end_src
* Contact
* Acknowledgments
FUSTA is standing on the shoulders of, among others, [[https://github.com/zargony/fuse-rs/][fuse-rs]], [[https://github.com/clap-rs/clap][clap]], [[https://github.com/danburkert/memmap-rs][memmap]] and [[https://github.com/knsd/daemonize][daemonize]].
